import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import (
    Message, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
)
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from db import SessionLocal, User, UserRole, PendingInvite, Reminder, TrainerClient, Workout
from sqlalchemy.future import select
import datetime
from aiogram.utils.markdown import hbold
import os
from aiogram.utils.keyboard import InlineKeyboardBuilder

BOT_TOKEN = "7838089838:AAF0xUGyDsKI3g3pG2JfEtfDR7Tq9X7G_iQ"
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

PRIVACY_PATH = os.path.join(os.path.dirname(__file__), "privacy.txt")

def pluralize_years(n):
    n = abs(int(n))
    if 11 <= n % 100 <= 14:
        return f"{n} –ª–µ—Ç"
    elif n % 10 == 1:
        return f"{n} –≥–æ–¥"
    elif 2 <= n % 10 <= 4:
        return f"{n} –≥–æ–¥–∞"
    else:
        return f"{n} –ª–µ—Ç"

# --- –ö–Ω–æ–ø–∫–∏ ---
def get_role_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–¢—Ä–µ–Ω–µ—Ä üí™", callback_data="role_trainer")],
            [InlineKeyboardButton(text="–ü–æ–¥–æ–ø–µ—á–Ω—ã–π üèÉ", callback_data="role_client")],
        ]
    )

def get_delete_confirm_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–î–∞, —É–¥–∞–ª–∏—Ç—å ‚ùå", callback_data="delete_yes")],
            [InlineKeyboardButton(text="–ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="delete_no")],
        ]
    )

def get_main_keyboard(role: str = None):
    if role == "trainer":
        buttons = [
            [KeyboardButton(text="üè† –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="üèãÔ∏è‚Äç‚ôÇÔ∏è –ñ—É—Ä–Ω–∞–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"), KeyboardButton(text="üë• –ú–æ–∏ –∫–ª–∏–µ–Ω—Ç—ã"), KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞")],
            [KeyboardButton(text="üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"), KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton(text="üîÑ –°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å"), KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")],
        ]
    elif role == "client":
        buttons = [
            [KeyboardButton(text="üè† –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="üèãÔ∏è‚Äç‚ôÇÔ∏è –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"), KeyboardButton(text="üë®‚Äçüè´ –ú–æ–∏ —Ç—Ä–µ–Ω–µ—Ä—ã"), KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton(text="üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"), KeyboardButton(text="üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å"), KeyboardButton(text="üîÑ –°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å"), KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")],
        ]
    else:
        buttons = [
            [KeyboardButton(text="üè† –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="üèãÔ∏è‚Äç‚ôÇÔ∏è –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")],
            [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")],
        ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

# --- FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è ---
class ProfileStates(StatesGroup):
    waiting_full_name = State()
    waiting_age = State()
    waiting_weight = State()
    waiting_height = State()
    waiting_experience = State()  # –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞
    waiting_specialization = State()  # –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞
    waiting_contacts = State()  # –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞
    waiting_about = State()  # –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞
    waiting_photo = State()  # –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞
    waiting_goal = State()  # –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞

# --- FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ---
class WorkoutStates(StatesGroup):
    waiting_client_username = State()
    waiting_date = State()
    waiting_exercises = State()
    waiting_notes = State()

# --- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è FSM –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ---
class ReminderFSM(StatesGroup):
    waiting_recipient = State()
    waiting_client = State()
    waiting_datetime = State()
    waiting_text = State()

# --- FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ ---
class AddClientStates(StatesGroup):
    waiting_username = State()

# --- START/CHANGEROLE ---
@dp.message(Command("start"))
async def start_handler(message: Message):
    async with SessionLocal() as session:
        result = await session.execute(select(User).where(User.telegram_id == str(message.from_user.id)))
        user = result.scalar_one_or_none()
        if user:
            if user.username != message.from_user.username:
                user.username = message.from_user.username
                await session.commit()
            await message.answer(
                f"üëã <b>–ü—Ä–∏–≤–µ—Ç, {user.full_name or user.username}!</b>\n–í–∞—à–∞ —Ä–æ–ª—å: <b>{user.role.value if user.role else '–Ω–µ –≤—ã–±—Ä–∞–Ω–∞'}</b>",
                parse_mode="HTML",
                reply_markup=get_main_keyboard(user.role.value if user.role else None)
            )
        else:
            if not message.from_user.username:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ username –≤ Telegram –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")
                return
            new_user = User(
                telegram_id=str(message.from_user.id),
                username=message.from_user.username,
                full_name=message.from_user.full_name,
                role=None
            )
            session.add(new_user)
            await session.commit()
            await message.answer(
                "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ OneFit!</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å:",
                reply_markup=get_role_keyboard(),
                parse_mode="HTML"
            )

@dp.message(Command("changerole"))
async def changerole_handler(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å:", reply_markup=get_role_keyboard())

@dp.callback_query(F.data.in_(["role_trainer", "role_client"]))
async def role_callback_handler(callback: types.CallbackQuery):
    async with SessionLocal() as session:
        result = await session.execute(select(User).where(User.telegram_id == str(callback.from_user.id)))
        user = result.scalar_one_or_none()
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
        new_role = UserRole.trainer if callback.data == "role_trainer" else UserRole.client
        user.role = new_role
        await session.commit()
        await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å: <b>{'–¢—Ä–µ–Ω–µ—Ä üí™' if new_role==UserRole.trainer else '–ü–æ–¥–æ–ø–µ—á–Ω—ã–π üèÉ'}</b>", parse_mode="HTML")
        await bot.send_message(user.telegram_id, "–†–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!", reply_markup=get_main_keyboard(new_role.value))
        await callback.answer()

# --- –ü—Ä–æ—Ñ–∏–ª—å (FSM) ---
@dp.message(Command("profile"))
async def profile_start(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(ProfileStates.waiting_full_name)

@dp.message(ProfileStates.waiting_full_name)
async def profile_full_name(message: Message, state: FSMContext):
    await state.update_data(full_name=message.text.strip())
    await message.answer("–í–æ–∑—Ä–∞—Å—Ç:")
    await state.set_state(ProfileStates.waiting_age)

@dp.message(ProfileStates.waiting_age)
async def profile_age(message: Message, state: FSMContext):
    try:
        age = int(message.text.strip())
    except ValueError:
        await message.answer("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        return
    await state.update_data(age=age)
    await message.answer("–í–µ—Å (–∫–≥):")
    await state.set_state(ProfileStates.waiting_weight)

@dp.message(ProfileStates.waiting_weight)
async def profile_weight(message: Message, state: FSMContext):
    try:
        weight = int(message.text.strip())
    except ValueError:
        await message.answer("–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        return
    await state.update_data(weight=weight)
    await message.answer("–†–æ—Å—Ç (—Å–º):")
    await state.set_state(ProfileStates.waiting_height)

@dp.message(ProfileStates.waiting_height)
async def profile_height(message: Message, state: FSMContext):
    try:
        height = int(message.text.strip())
    except ValueError:
        await message.answer("–†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        return
    await state.update_data(height=height)
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with SessionLocal() as session:
        result = await session.execute(select(User).where(User.telegram_id == str(message.from_user.id)))
        user = result.scalar_one_or_none()
        if user and user.role == UserRole.trainer:
            await message.answer("–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã (–ª–µ—Ç):")
            await state.set_state(ProfileStates.waiting_experience)
        else:
            await message.answer("–í–∞—à–∞ —Ü–µ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Ö—É–¥–µ—Ç—å, –Ω–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É):")
            await state.set_state(ProfileStates.waiting_goal)

@dp.message(ProfileStates.waiting_experience)
async def profile_experience(message: Message, state: FSMContext):
    try:
        experience = int(message.text.strip())
    except ValueError:
        await message.answer("–û–ø—ã—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (–ª–µ—Ç)!")
        return
    await state.update_data(experience=experience)
    await message.answer("–í–∞—à–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã, –∂–∏—Ä–æ—Å–∂–∏–≥–∞–Ω–∏–µ, —Ä–µ–∞–±–∏–ª–∏—Ç–∞—Ü–∏—è):")
    await state.set_state(ProfileStates.waiting_specialization)

@dp.message(ProfileStates.waiting_specialization)
async def profile_specialization(message: Message, state: FSMContext):
    await state.update_data(specialization=message.text.strip())
    await message.answer("–í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–µ–ª–µ—Ñ–æ–Ω, email, —Å–æ—Ü—Å–µ—Ç–∏):")
    await state.set_state(ProfileStates.waiting_contacts)

@dp.message(ProfileStates.waiting_contacts)
async def profile_contacts(message: Message, state: FSMContext):
    await state.update_data(contacts=message.text.strip())
    await message.answer("–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ (–∫–æ—Ä–æ—Ç–∫–æ):")
    await state.set_state(ProfileStates.waiting_about)

@dp.message(ProfileStates.waiting_about)
async def profile_about(message: Message, state: FSMContext):
    await state.update_data(about=message.text.strip())
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':")
    await state.set_state(ProfileStates.waiting_photo)

@dp.message(ProfileStates.waiting_photo)
async def profile_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    photo_file_id = None
    if message.photo:
        photo_file_id = message.photo[-1].file_id
    elif message.text and message.text.lower().strip() == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        photo_file_id = None
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
        return
    async with SessionLocal() as session:
        result = await session.execute(select(User).where(User.telegram_id == str(message.from_user.id)))
        user = result.scalar_one_or_none()
        if user:
            user.full_name = data.get("full_name")
            user.age = data.get("age")
            user.weight = data.get("weight")
            user.height = data.get("height")
            user.experience = data.get("experience")
            user.specialization = data.get("specialization")
            user.contacts = data.get("contacts")
            user.about = data.get("about")
            user.goal = data.get("goal")
            if photo_file_id:
                user.photo_file_id = photo_file_id
            await session.commit()
    await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω!", reply_markup=get_main_keyboard(user.role.value if user and user.role else None))
    await state.clear()

@dp.message(ProfileStates.waiting_goal)
async def profile_goal(message: Message, state: FSMContext):
    await state.update_data(goal=message.text.strip())
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':")
    await state.set_state(ProfileStates.waiting_photo)

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ ---
@dp.message(Command("addclient"))
async def addclient_handler(message: Message):
    args = message.get_args()
    if not args:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /addclient username")
        return
    username = args.strip().lstrip("@")
    async with SessionLocal() as session:
        trainer_result = await session.execute(select(User).where(User.telegram_id == str(message.from_user.id)))
        trainer = trainer_result.scalar_one_or_none()
        if not trainer or trainer.role != UserRole.trainer:
            await message.answer("–¢–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–µ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤!")
            return
        client_result = await session.execute(select(User).where(User.username.ilike(username)))
        client = client_result.scalar_one_or_none()
        if client:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–≤—è–∑—å
            link = await session.execute(select(TrainerClient).where(TrainerClient.trainer_id==trainer.id, TrainerClient.client_id==client.id))
            if link.scalar_one_or_none():
                await message.answer("–ö–ª–∏–µ–Ω—Ç —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω!")
                return
            session.add(TrainerClient(trainer_id=trainer.id, client_id=client.id))
            await session.commit()
            await message.answer(f"–ö–ª–∏–µ–Ω—Ç @{client.username} –¥–æ–±–∞–≤–ª–µ–Ω!")
        else:
            # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
            session.add(PendingInvite(username=username, trainer_id=trainer.id))
            await session.commit()
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!")

# --- –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ ---
@dp.message(Command("myclients"))
async def myclients_handler(message: Message):
    async with SessionLocal() as session:
        trainer_result = await session.execute(select(User).where(User.telegram_id == str(message.from_user.id)))
        trainer = trainer_result.scalar_one_or_none()
        if not trainer or trainer.role != UserRole.trainer:
            await message.answer("–¢–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–µ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤!")
            return
        links = await session.execute(select(TrainerClient, User).join(User, TrainerClient.client_id==User.id).where(TrainerClient.trainer_id==trainer.id))
        clients = links.all()
        if not clients:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤.")
            return
        text = "–í–∞—à–∏ –∫–ª–∏–µ–Ω—Ç—ã:\n" + "\n".join([f"@{c.User.username} ({c.User.full_name or '-'})" for c in clients])
        await message.answer(text)

# --- –°–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–µ—Ä–æ–≤ ---
@dp.message(Command("mytrainers"))
async def mytrainers_handler(message: Message):
    async with SessionLocal() as session:
        client_result = await session.execute(select(User).where(User.telegram_id == str(message.from_user.id)))
        client = client_result.scalar_one_or_none()
        if not client or client.role != UserRole.client:
            await message.answer("–¢–æ–ª—å–∫–æ –ø–æ–¥–æ–ø–µ—á–Ω—ã–π –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä–æ–≤!")
            return
        links = await session.execute(select(TrainerClient, User).join(User, TrainerClient.trainer_id==User.id).where(TrainerClient.client_id==client.id))
        trainers = links.all()
        if not trainers:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Ç—Ä–µ–Ω–µ—Ä–æ–≤.")
            return
        text = "–í–∞—à–∏ —Ç—Ä–µ–Ω–µ—Ä—ã:\n" + "\n".join([f"@{c.User.username} ({c.User.full_name or '-'})" for c in trainers])
        await message.answer(text)

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (FSM) ---
@dp.message(Command("addworkout"))
async def addworkout_start(message: Message, state: FSMContext):
    async with SessionLocal() as session:
        user_result = await session.execute(select(User).where(User.telegram_id == str(message.from_user.id)))
        user = user_result.scalar_one_or_none()
        if not user or user.role != UserRole.trainer:
            await message.answer("–¢–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–µ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!")
            return
    await message.answer("–î–ª—è –∫–∞–∫–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞? –í–≤–µ–¥–∏—Ç–µ username:")
    await state.set_state(WorkoutStates.waiting_client_username)

@dp.message(WorkoutStates.waiting_client_username)
async def addworkout_client(message: Message, state: FSMContext):
    username = message.text.strip().lstrip("@")
    await state.update_data(client_username=username)
    await message.answer("–î–∞—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–ì–ì–ì–ì-–ú–ú-–î–î, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–µ–≥–æ–¥–Ω—è):")
    await state.set_state(WorkoutStates.waiting_date)

@dp.message(WorkoutStates.waiting_date)
async def addworkout_date(message: Message, state: FSMContext):
    text = message.text.strip()
    if not text:
        date = datetime.datetime.now()
    else:
        try:
            date = datetime.datetime.strptime(text, "%Y-%m-%d")
        except ValueError:
            await message.answer("–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: –ì–ì–ì–ì-–ú–ú-–î–î")
            return
    await state.update_data(date=date)
    await message.answer("–û–ø–∏—à–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:")
    await state.set_state(WorkoutStates.waiting_exercises)

@dp.message(WorkoutStates.waiting_exercises)
async def addworkout_exercises(message: Message, state: FSMContext):
    await state.update_data(exercises=message.text.strip())
    await message.answer("–ó–∞–º–µ—Ç–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):")
    await state.set_state(WorkoutStates.waiting_notes)

@dp.message(WorkoutStates.waiting_notes)
async def addworkout_notes(message: Message, state: FSMContext):
    data = await state.get_data()
    async with SessionLocal() as session:
        trainer_result = await session.execute(select(User).where(User.telegram_id == str(message.from_user.id)))
        trainer = trainer_result.scalar_one_or_none()
        client_result = await session.execute(select(User).where(User.username.ilike(data.get("client_username"))))
        client = client_result.scalar_one_or_none()
        if not client:
            await message.answer("–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            await state.clear()
            return
        workout = Workout(
            client_id=client.id,
            trainer_id=trainer.id,
            date=data.get("date"),
            exercises=data.get("exercises"),
            notes=message.text.strip()
        )
        session.add(workout)
        await session.commit()
    await message.answer("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=get_main_keyboard(trainer.role.value if trainer and trainer.role else None))
    await state.clear()

# --- –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ ---
@dp.message(Command("workouts"))
async def workouts_handler(message: Message):
    async with SessionLocal() as session:
        user_result = await session.execute(select(User).where(User.telegram_id == str(message.from_user.id)))
        user = user_result.scalar_one_or_none()
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        if user.role == UserRole.trainer:
            # –¢—Ä–µ–Ω–µ—Ä –≤–∏–¥–∏—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å–≤–æ–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
            links = await session.execute(select(TrainerClient).where(TrainerClient.trainer_id==user.id))
            client_ids = [l.client_id for l in links.scalars().all()]
            if not client_ids:
                await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤.")
                return
            workouts = await session.execute(select(Workout, User).join(User, Workout.client_id==User.id).where(Workout.client_id.in_(client_ids)))
            items = workouts.all()
            if not items:
                await message.answer("–ù–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —É –≤–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.")
                return
            text = "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:\n" + "\n\n".join([
                f"@{c.User.username} {c.Workout.date.strftime('%Y-%m-%d')}: {c.Workout.exercises} ({c.Workout.notes or '-'})" for c in items
            ])
            await message.answer(text)
        else:
            # –ö–ª–∏–µ–Ω—Ç –≤–∏–¥–∏—Ç —Å–≤–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
            workouts = await session.execute(select(Workout).where(Workout.client_id==user.id))
            items = workouts.scalars().all()
            if not items:
                await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.")
                return
            text = "–í–∞—à–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n" + "\n\n".join([
                f"{w.date.strftime('%Y-%m-%d')}: {w.exercises} ({w.notes or '-'})" for w in items
            ])
            await message.answer(text)

# --- –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ---
@dp.message(Command("delworkout"))
async def delworkout_handler(message: Message):
    args = message.get_args()
    if not args:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delworkout id")
        return
    try:
        workout_id = int(args.strip())
    except ValueError:
        await message.answer("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        return
    async with SessionLocal() as session:
        workout_result = await session.execute(select(Workout).where(Workout.id==workout_id))
        workout = workout_result.scalar_one_or_none()
        if not workout:
            await message.answer("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        await session.delete(workout)
        await session.commit()
        await message.answer("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞!")

# --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ---
@dp.message(Command("editworkout"))
async def editworkout_handler(message: Message):
    await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ (MVP)")

# --- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (FSM) ---
@dp.message(Command("remind"))
async def remind_start(message: Message, state: FSMContext):
    async with SessionLocal() as session:
        user_result = await session.execute(select(User).where(User.telegram_id == str(message.from_user.id)))
        user = user_result.scalar_one_or_none()
        if user and user.role == UserRole.client:
            # –¢–æ–ª—å–∫–æ —Å–µ–±–µ
            await state.update_data(recipient="self")
            await message.answer("–í–≤–µ–¥–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2024-05-01 09:00):")
            await state.set_state(ReminderFSM.waiting_datetime)
        else:
            # –°—Ç–∞—Ä–æ–µ –º–µ–Ω—é –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="–°–µ–±–µ", callback_data="remind_self")],
                    [InlineKeyboardButton(text="–ö–ª–∏–µ–Ω—Ç—É", callback_data="remind_client")],
                ]
            )
            await message.answer("–ö–æ–º—É —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?", reply_markup=kb)
            await state.set_state(ReminderFSM.waiting_recipient)

@dp.callback_query(lambda c: c.data == "remind_self")
async def remind_self(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(recipient="self")
    await callback.message.answer("–í–≤–µ–¥–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2024-05-01 09:00):")
    await state.set_state(ReminderFSM.waiting_datetime)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "remind_client")
async def remind_client(callback: types.CallbackQuery, state: FSMContext):
    async with SessionLocal() as session:
        trainer_result = await session.execute(select(User).where(User.telegram_id == str(callback.from_user.id)))
        trainer = trainer_result.scalar_one_or_none()
        if not trainer or trainer.role != UserRole.trainer:
            await callback.message.answer("–¢–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–µ—Ä –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É!")
            await state.clear()
            await callback.answer()
            return
        links = await session.execute(select(TrainerClient, User).join(User, TrainerClient.client_id==User.id).where(TrainerClient.trainer_id==trainer.id))
        clients = links.all()
        kb = InlineKeyboardBuilder()
        for c in clients[:20]:
            kb.button(text=f"@{c.User.username}", callback_data=f"remind_client_select_{c.User.username}")
        kb.button(text="–í–≤–µ—Å—Ç–∏ username –≤—Ä—É—á–Ω—É—é", callback_data="remind_client_manual")
        kb.adjust(2)
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ username –≤—Ä—É—á–Ω—É—é:", reply_markup=kb.as_markup())
        await state.set_state(ReminderFSM.waiting_client)
        await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("remind_client_select_"))
async def remind_client_select(callback: types.CallbackQuery, state: FSMContext):
    username = callback.data.replace("remind_client_select_", "")
    async with SessionLocal() as session:
        client_result = await session.execute(select(User).where(User.username.ilike(username)))
        client = client_result.scalar_one_or_none()
        if not client:
            await callback.message.answer("–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            await callback.answer()
            return
        await state.update_data(recipient="client", client_id=client.id)
    await callback.message.answer(
        f"–ö–ª–∏–µ–Ω—Ç @{username} –≤—ã–±—Ä–∞–Ω!\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2024-06-10 09:00):"
    )
    await state.set_state(ReminderFSM.waiting_datetime)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "remind_client_manual")
async def remind_client_manual(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ username –∫–ª–∏–µ–Ω—Ç–∞:")
    await state.set_state(ReminderFSM.waiting_client)
    await callback.answer()

@dp.message(ReminderFSM.waiting_client)
async def remind_client_username(message: Message, state: FSMContext):
    username = message.text.strip().lstrip("@")
    async with SessionLocal() as session:
        trainer_result = await session.execute(select(User).where(User.telegram_id == str(message.from_user.id)))
        trainer = trainer_result.scalar_one_or_none()
        if not trainer or trainer.role != UserRole.trainer:
            await message.answer("–¢–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–µ—Ä –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É!")
            await state.clear()
            return
        client_result = await session.execute(select(User).where(User.username.ilike(username)))
        client = client_result.scalar_one_or_none()
        if not client:
            await message.answer("–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username:")
            return
        link = await session.execute(select(TrainerClient).where(TrainerClient.trainer_id==trainer.id, TrainerClient.client_id==client.id))
        if not link.scalar_one_or_none():
            await message.answer("–≠—Ç–æ—Ç –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞–º. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ /addclient.")
            await state.clear()
            return
        await state.update_data(recipient="client", client_id=client.id)
    await message.answer(
        f"–ö–ª–∏–µ–Ω—Ç @{username} –≤—ã–±—Ä–∞–Ω!\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2024-06-10 09:00):"
    )
    await state.set_state(ReminderFSM.waiting_datetime)

@dp.message(ReminderFSM.waiting_datetime)
async def remind_datetime(message: Message, state: FSMContext):
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    if message.text in GLOBAL_MENU_BUTTONS:
        await state.clear()
        await GLOBAL_MENU_BUTTONS[message.text](message, state)
        return
    print(f"[DEBUG] waiting_datetime: {message.text}")
    text = message.text.strip()
    try:
        remind_at = datetime.datetime.strptime(text, "%Y-%m-%d %H:%M")
    except ValueError:
        await message.answer("–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú")
        return
    await state.update_data(remind_at=remind_at)
    await message.answer("–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
    await state.set_state(ReminderFSM.waiting_text)

@dp.message(ReminderFSM.waiting_text)
async def remind_text(message: Message, state: FSMContext):
    if message.text in GLOBAL_MENU_BUTTONS:
        await state.clear()
        await GLOBAL_MENU_BUTTONS[message.text](message, state)
        return
    print(f"[DEBUG] waiting_text: {message.text}")
    data = await state.get_data()
    async with SessionLocal() as session:
        if data.get("recipient") == "self":
            user_result = await session.execute(select(User).where(User.telegram_id == str(message.from_user.id)))
            user = user_result.scalar_one_or_none()
            if not user:
                await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                await state.clear()
                return
            reminder = Reminder(user_id=user.id, remind_at=data.get("remind_at"), text=message.text.strip())
            session.add(reminder)
            await session.commit()
            await message.answer(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!")
        elif data.get("recipient") == "client":
            reminder = Reminder(user_id=data["client_id"], remind_at=data["remind_at"], text=message.text.strip())
            session.add(reminder)
            await session.commit()
            await message.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–æ!")
    await state.clear()

# --- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ ---
@dp.message(Command("clientinfo"))
async def clientinfo_handler(message: Message):
    args = message.get_args()
    if not args:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /clientinfo username")
        return
    username = args.strip().lstrip("@")
    async with SessionLocal() as session:
        client_result = await session.execute(select(User).where(User.username.ilike(username)))
        client = client_result.scalar_one_or_none()
        if not client:
            await message.answer("–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        text = f"–ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ @{client.username}:\n" \
               f"–§–ò–û: {client.full_name or '-'}\n" \
               f"–í–æ–∑—Ä–∞—Å—Ç: {client.age or '-'}\n" \
               f"–í–µ—Å: {client.weight or '-'}\n" \
               f"–†–æ—Å—Ç: {client.height or '-'}\n" \
               f"–¶–µ–ª—å: {client.goal or '-'}"
        await message.answer(text)

# --- –ü–æ–ª–∏—Ç–∏–∫–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π ---
PRIVACY_PAGE_SIZE = 8  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–Ω–∫—Ç–æ–≤ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ

async def get_privacy_pages():
    with open(PRIVACY_PATH, encoding="utf-8") as f:
        text = f.read()
    # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –Ω–æ–º–µ—Ä–∞–º –ø—É–Ω–∫—Ç–æ–≤
    parts = text.split("\n\n")
    page1 = "\n\n".join(parts[:PRIVACY_PAGE_SIZE])
    page2 = "\n\n".join(parts[PRIVACY_PAGE_SIZE:])
    return [page1, page2]

@dp.message(Command("privacy"))
async def privacy_handler(message: Message):
    pages = await get_privacy_pages()
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–î–∞–ª–µ–µ", callback_data="privacy_next")]]
    ) if len(pages) > 1 else None
    await message.answer(pages[0], reply_markup=kb)

@dp.callback_query(F.data == "privacy_next")
async def privacy_next_handler(callback: types.CallbackQuery):
    pages = await get_privacy_pages()
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="privacy_prev")]]
    )
    await callback.message.edit_text(pages[1], reply_markup=kb)
    await callback.answer()

@dp.callback_query(F.data == "privacy_prev")
async def privacy_prev_handler(callback: types.CallbackQuery):
    pages = await get_privacy_pages()
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–î–∞–ª–µ–µ", callback_data="privacy_next")]]
    )
    await callback.message.edit_text(pages[0], reply_markup=kb)
    await callback.answer()

# --- –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è ---
@dp.message(Command("deleteprofile"))
async def deleteprofile_handler(message: Message):
    await message.answer("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å?", reply_markup=get_delete_confirm_keyboard())

@dp.callback_query(lambda c: c.data in ["delete_yes", "delete_no"])
async def deleteprofile_confirm(callback: types.CallbackQuery):
    if callback.data == "delete_no":
        await callback.message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await callback.answer()
        return
    async with SessionLocal() as session:
        result = await session.execute(select(User).where(User.telegram_id == str(callback.from_user.id)))
        user = result.scalar_one_or_none()
        if user:
            await session.delete(user)
            await session.commit()
            await callback.message.answer("–ü—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª—ë–Ω.", reply_markup=ReplyKeyboardRemove())
        else:
            await callback.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await callback.answer()

# --- –ü–æ–º–æ—â—å ---
@dp.message(Command("help"))
async def help_handler(message: Message):
    await message.answer(
        "–≠—Ç–æ –±–æ—Ç OneFit! –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å\n"
        "/help ‚Äî –ø–æ–º–æ—â—å\n"
        "/profile ‚Äî –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/addclient ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞\n"
        "/myclients ‚Äî –º–æ–∏ –∫–ª–∏–µ–Ω—Ç—ã\n"
        "/mytrainers ‚Äî –º–æ–∏ —Ç—Ä–µ–Ω–µ—Ä—ã\n"
        "/addworkout ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É\n"
        "/workouts ‚Äî –º–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
        "/delworkout ‚Äî —É–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É\n"
        "/editworkout ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É\n"
        "/remind ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
        "/clientinfo ‚Äî –∏–Ω—Ñ–æ –æ –∫–ª–∏–µ–Ω—Ç–µ\n"
        "/changerole ‚Äî —Å–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å\n"
        "/privacy ‚Äî –ø–æ–ª–∏—Ç–∏–∫–∞\n"
        "/deleteprofile ‚Äî —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"
    )

# --- –ë—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é ---
@dp.message(F.text.in_(["üè† –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"]))
async def menu_profile(message: Message, state: FSMContext):
    await state.clear()
    async with SessionLocal() as session:
        user_result = await session.execute(select(User).where(User.telegram_id == str(message.from_user.id)))
        user = user_result.scalar_one_or_none()
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
        if user.role == UserRole.trainer:
            text = (
                f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å —Ç—Ä–µ–Ω–µ—Ä–∞</b>\n"
                f"–§–ò–û: {user.full_name or '-'}\n"
                f"Username: @{user.username}\n"
                f"–í–æ–∑—Ä–∞—Å—Ç: {pluralize_years(user.age) if user.age else '-'}\n"
                f"–í–µ—Å: {str(user.weight) + ' –∫–≥' if user.weight else '-'}\n"
                f"–†–æ—Å—Ç: {str(user.height) + ' —Å–º' if user.height else '-'}\n"
                f"–û–ø—ã—Ç: {pluralize_years(user.experience) if user.experience else '-'}\n"
                f"–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {user.specialization or '-'}\n"
                f"–ö–æ–Ω—Ç–∞–∫—Ç—ã: {user.contacts or '-'}\n"
                f"–û —Å–µ–±–µ: {user.about or '-'}\n"
            )
        else:
            text = (
                f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ</b>\n"
                f"–§–ò–û: {user.full_name or '-'}\n"
                f"Username: @{user.username}\n"
                f"–í–æ–∑—Ä–∞—Å—Ç: {pluralize_years(user.age) if user.age else '-'}\n"
                f"–í–µ—Å: {str(user.weight) + ' –∫–≥' if user.weight else '-'}\n"
                f"–†–æ—Å—Ç: {str(user.height) + ' —Å–º' if user.height else '-'}\n"
                f"–¶–µ–ª—å: {user.goal or '-'}\n"
            )
        # –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        edit_kb = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="edit_profile")]]
        )
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
        if user.photo_file_id:
            await message.answer_photo(user.photo_file_id, caption=text, parse_mode="HTML", reply_markup=edit_kb)
        else:
            await message.answer(text, parse_mode="HTML", reply_markup=edit_kb)
        # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å
        if not user.full_name or not user.age or not user.weight or not user.height or (user.role == UserRole.trainer and (not user.experience or not user.specialization)):
            await message.answer("–ü–æ—Ö–æ–∂–µ, –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω. –•–æ—Ç–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å? –û—Ç–ø—Ä–∞–≤—å—Ç–µ /profile")

@dp.callback_query(F.data == "edit_profile")
async def edit_profile_callback(callback: types.CallbackQuery, state: FSMContext):
    await profile_start(callback.message, state)
    await callback.answer()

@dp.message(F.text.in_(["üë• –ú–æ–∏ –∫–ª–∏–µ–Ω—Ç—ã"]))
async def menu_clients(message: Message, state: FSMContext):
    await state.clear()
    await myclients_handler(message)

@dp.message(F.text.in_(["üë®‚Äçüè´ –ú–æ–∏ —Ç—Ä–µ–Ω–µ—Ä—ã"]))
async def menu_trainers(message: Message, state: FSMContext):
    await state.clear()
    await mytrainers_handler(message)

@dp.message(F.text.in_(["üèãÔ∏è‚Äç‚ôÇÔ∏è –ñ—É—Ä–Ω–∞–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"]))
async def menu_workouts_trainer(message: Message, state: FSMContext):
    await state.clear()
    await workouts_handler(message)

@dp.message(F.text.in_(["‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞"]))
async def menu_addclient(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ username –∫–ª–∏–µ–Ω—Ç–∞:")
    await state.set_state(AddClientStates.waiting_username)

@dp.message(AddClientStates.waiting_username)
async def addclient_fsm_username(message: Message, state: FSMContext):
    username = message.text.strip().lstrip("@")
    async with SessionLocal() as session:
        trainer_result = await session.execute(select(User).where(User.telegram_id == str(message.from_user.id)))
        trainer = trainer_result.scalar_one_or_none()
        if not trainer or trainer.role != UserRole.trainer:
            await message.answer("–¢–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–µ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤!")
            await state.clear()
            return
        client_result = await session.execute(select(User).where(User.username.ilike(username)))
        client = client_result.scalar_one_or_none()
        if client:
            link = await session.execute(select(TrainerClient).where(TrainerClient.trainer_id==trainer.id, TrainerClient.client_id==client.id))
            if link.scalar_one_or_none():
                await message.answer("–ö–ª–∏–µ–Ω—Ç —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω!")
                await state.clear()
                return
            session.add(TrainerClient(trainer_id=trainer.id, client_id=client.id))
            await session.commit()
            await message.answer(f"–ö–ª–∏–µ–Ω—Ç @{client.username} –¥–æ–±–∞–≤–ª–µ–Ω!")
        else:
            session.add(PendingInvite(username=username, trainer_id=trainer.id))
            await session.commit()
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!")
    await state.clear()

@dp.message(F.text.in_(["üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"]))
async def menu_remind(message: Message, state: FSMContext):
    await state.clear()
    async with SessionLocal() as session:
        user_result = await session.execute(select(User).where(User.telegram_id == str(message.from_user.id)))
        user = user_result.scalar_one_or_none()
        if user and user.role == UserRole.client:
            # –¢–æ–ª—å–∫–æ —Å–µ–±–µ
            await state.update_data(recipient="self")
            await message.answer("–í–≤–µ–¥–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2024-05-01 09:00):")
            await state.set_state(ReminderFSM.waiting_datetime)
        else:
            # –°—Ç–∞—Ä–æ–µ –º–µ–Ω—é –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="–°–µ–±–µ", callback_data="remind_self")],
                    [InlineKeyboardButton(text="–ö–ª–∏–µ–Ω—Ç—É", callback_data="remind_client")],
                ]
            )
            await message.answer("–ö–æ–º—É —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?", reply_markup=kb)
            await state.set_state(ReminderFSM.waiting_recipient)

@dp.message(F.text.in_(["üîî –ö–ª–∏–µ–Ω—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"]))
async def menu_remind_client(message: Message, state: FSMContext):
    await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–ª–∏–µ–Ω—Ç—É –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏.")

@dp.message(F.text.in_(["‚ÑπÔ∏è –ü–æ–º–æ—â—å"]))
async def menu_help(message: Message, state: FSMContext):
    await state.clear()
    await help_handler(message)

@dp.message(F.text.in_(["üîÑ –°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å"]))
async def menu_changerole(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å:", reply_markup=get_role_keyboard())

@dp.message(F.text.in_(["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]))
async def menu_stats(message: Message, state: FSMContext):
    await state.clear()
    async with SessionLocal() as session:
        user_result = await session.execute(select(User).where(User.telegram_id == str(message.from_user.id)))
        user = user_result.scalar_one_or_none()
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        if user.role == UserRole.trainer:
            # ... —Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞ ...
            links = await session.execute(select(TrainerClient, User).join(User, TrainerClient.client_id==User.id).where(TrainerClient.trainer_id==user.id))
            clients = links.all()
            num_clients = len(clients)
            from datetime import datetime, timedelta
            month_ago = datetime.now() - timedelta(days=30)
            new_clients = [c for c in clients if c.User.created_at and c.User.created_at >= month_ago]
            workouts = await session.execute(select(Workout).where(Workout.trainer_id==user.id))
            workouts_list = workouts.scalars().all()
            num_workouts = len(workouts_list)
            workouts_month = [w for w in workouts_list if w.date and w.date >= month_ago]
            reminders = await session.execute(select(Reminder).where(Reminder.user_id.in_([c.User.id for c in clients]+[user.id])))
            reminders_list = reminders.scalars().all()
            num_reminders = len(reminders_list)
            from collections import Counter
            client_ids = [w.client_id for w in workouts_list]
            if client_ids:
                most_active_id = Counter(client_ids).most_common(1)[0][0]
                most_active = next((c.User for c in clients if c.User.id == most_active_id), None)
                most_active_count = Counter(client_ids).most_common(1)[0][1]
                active_str = f"@{most_active.username} ({most_active_count} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫)" if most_active else "-"
            else:
                active_str = "-"
            text = (
                f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
                f"üë• –ö–ª–∏–µ–Ω—Ç–æ–≤: {num_clients}\n"
                f"‚ûï –ù–æ–≤—ã—Ö –∑–∞ –º–µ—Å—è—Ü: {len(new_clients)}\n\n"
                f"üèãÔ∏è‚Äç‚ôÇÔ∏è –ü—Ä–æ–≤–µ–¥–µ–Ω–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {num_workouts}\n"
                f"üìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü: {len(workouts_month)}\n\n"
                f"üîî –°–æ–∑–¥–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {num_reminders}\n\n"
                f"ü•á –°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∏–µ–Ω—Ç: {active_str}"
            )
            await message.answer(text)
        else:
            # –õ–æ–≥–∏–∫–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
            from datetime import datetime, timedelta
            month_ago = datetime.now() - timedelta(days=30)
            workouts = await session.execute(select(Workout).where(Workout.client_id==user.id))
            workouts_list = workouts.scalars().all()
            num_workouts = len(workouts_list)
            workouts_month = [w for w in workouts_list if w.date and w.date >= month_ago]
            reminders = await session.execute(select(Reminder).where(Reminder.user_id==user.id))
            reminders_list = reminders.scalars().all()
            num_reminders = len(reminders_list)
            text = (
                f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
                f"üèãÔ∏è‚Äç‚ôÇÔ∏è –í–∞—à–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {num_workouts}\n"
                f"üìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü: {len(workouts_month)}\n\n"
                f"üîî –í–∞—à–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {num_reminders}"
            )
            await message.answer(text)

@dp.message(F.text.in_(["üèãÔ∏è‚Äç‚ôÇÔ∏è –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"]))
async def menu_workouts_client(message: Message, state: FSMContext):
    await state.clear()
    await workouts_handler(message)

@dp.message(F.text.in_(["üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å"]))
async def menu_calendar(message: Message, state: FSMContext):
    await state.clear()
    async with SessionLocal() as session:
        user_result = await session.execute(select(User).where(User.telegram_id == str(message.from_user.id)))
        user = user_result.scalar_one_or_none()
        if not user or user.role != UserRole.client:
            await message.answer("–¢–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å–≤–æ–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫!")
            return
        workouts = await session.execute(select(Workout).where(Workout.client_id==user.id))
        workouts_list = workouts.scalars().all()
        if not workouts_list:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.")
            return
        from collections import defaultdict
        calendar = defaultdict(list)
        for w in workouts_list:
            date_str = w.date.strftime('%Y-%m-%d')
            calendar[date_str].append(w)
        text = "\n".join([f"{date}: {len(items)} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫" for date, items in sorted(calendar.items())])
        await message.answer(f"üìÖ –í–∞—à –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:\n\n{text}")

# --- –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ---
async def reminder_worker():
    while True:
        now = datetime.datetime.now()
        async with SessionLocal() as session:
            result = await session.execute(
                select(Reminder, User)
                .join(User, Reminder.user_id == User.id)
                .where(Reminder.sent == 0)
                .where(Reminder.remind_at <= now)
            )
            reminders = result.all()
            for reminder, user in reminders:
                try:
                    await bot.send_message(user.telegram_id, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {reminder.text}")
                except Exception:
                    pass
                reminder.sent = 1
            await session.commit()
        await asyncio.sleep(60)

# --- –°–ø–∏—Å–æ–∫ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ ---
GLOBAL_MENU_BUTTONS = {
    "üè† –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å": menu_profile,
    "üë• –ú–æ–∏ –∫–ª–∏–µ–Ω—Ç—ã": menu_clients,
    "üë®‚Äçüè´ –ú–æ–∏ —Ç—Ä–µ–Ω–µ—Ä—ã": menu_trainers,
    "üèãÔ∏è‚Äç‚ôÇÔ∏è –ñ—É—Ä–Ω–∞–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫": menu_workouts_trainer,
    "üèãÔ∏è‚Äç‚ôÇÔ∏è –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏": menu_workouts_client,
    "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞": menu_addclient,
    "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è": menu_remind,
    "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞": menu_stats,
    "üîÑ –°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å": menu_changerole,
    "‚ÑπÔ∏è –ü–æ–º–æ—â—å": menu_help,
    "üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å": menu_calendar,
}

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == "__main__":
    import sys
    if sys.version_info >= (3, 10):
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
    else:
        loop = asyncio.get_event_loop()
    loop.create_task(reminder_worker())
    loop.run_until_complete(dp.start_polling(bot))