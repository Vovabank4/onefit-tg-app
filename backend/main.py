from fastapi import FastAPI
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.storage.memory import MemoryStorage
from db import init_db, SessionLocal, User, UserRole, PendingInvite, Reminder
from sqlalchemy.future import select
from aiogram.filters import Command
import datetime
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramAPIError
from aiogram import Router
import logging

# –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é
BOT_TOKEN = "7838089838:AAF0xUGyDsKI3g3pG2JfEtfDR7Tq9X7G_iQ"

app = FastAPI()

@app.get("/")
def read_root():
    return {"message": "OneFit backend —Ä–∞–±–æ—Ç–∞–µ—Ç!"}

# --- Telegram bot setup ---

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# @dp.message()
# async def echo_handler(message: Message):
#     await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø OneFit-–±–æ—Ç. –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ñ–∏—Ç–Ω–µ—Å-–º–∞–≥–∏—è üí™")

# --- –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ ---
def get_role_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–¢—Ä–µ–Ω–µ—Ä üí™", callback_data="role_trainer")],
            [InlineKeyboardButton(text="–ü–æ–¥–æ–ø–µ—á–Ω—ã–π üèÉ", callback_data="role_client")],
        ]
    )

# --- –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è ---
def get_delete_confirm_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–î–∞, —É–¥–∞–ª–∏—Ç—å ‚ùå", callback_data="delete_yes")],
            [InlineKeyboardButton(text="–ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="delete_no")],
        ]
    )

# --- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ---
def get_main_keyboard(role: str = None):
    if role == "trainer":
        buttons = [
            [KeyboardButton(text="üè† –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="üèãÔ∏è‚Äç‚ôÇÔ∏è –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")],
            [KeyboardButton(text="üë• –ú–æ–∏ –∫–ª–∏–µ–Ω—Ç—ã"), KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞")],
            [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")],
        ]
    elif role == "client":
        buttons = [
            [KeyboardButton(text="üè† –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="üèãÔ∏è‚Äç‚ôÇÔ∏è –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")],
            [KeyboardButton(text="üë®‚Äçüè´ –ú–æ–∏ —Ç—Ä–µ–Ω–µ—Ä—ã"), KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")],
        ]
    else:
        buttons = [
            [KeyboardButton(text="üè† –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="üèãÔ∏è‚Äç‚ôÇÔ∏è –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")],
            [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")],
        ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

# --- START/CHANGEROLE —Å –∫–Ω–æ–ø–∫–∞–º–∏ ---
@dp.message(Command("start"))
async def start_handler(message: Message):
    async with SessionLocal() as session:
        result = await session.execute(select(User).where(User.telegram_id == str(message.from_user.id)))
        user = result.scalar_one_or_none()
        if user:
            if user.username != message.from_user.username:
                user.username = message.from_user.username
                await session.commit()
            await message.answer(
                f"üëã <b>–ü—Ä–∏–≤–µ—Ç, {user.full_name or user.username}!</b>\n–í–∞—à–∞ —Ä–æ–ª—å: <b>{user.role.value if user.role else '–Ω–µ –≤—ã–±—Ä–∞–Ω–∞'}</b>",
                parse_mode="HTML",
                reply_markup=get_main_keyboard(user.role.value if user.role else None)
            )
        else:
            new_user = User(
                telegram_id=str(message.from_user.id),
                username=message.from_user.username,
                full_name=message.from_user.full_name,
                role=None
            )
            session.add(new_user)
            await session.commit()
            username = (message.from_user.username or "").lower()
            if not username:
                await message.answer("–£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
            else:
                result = await session.execute(select(PendingInvite))
                invites = result.scalars().all()
                invite = next((i for i in invites if i.username and i.username.lower() == username), None)
                if invite:
                    result = await session.execute(select(User).where(User.id == invite.trainer_id))
                    trainer = result.scalar_one_or_none()
                    if trainer:
                        await message.answer(f"–í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª —Ç—Ä–µ–Ω–µ—Ä @{trainer.username or trainer.full_name} –≤ OneFit! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ –∏ –ø–æ–ª—É—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è.")
                        from db import TrainerClient
                        trainer_client = TrainerClient(trainer_id=trainer.id, client_id=new_user.id)
                        session.add(trainer_client)
                        new_user.role = UserRole.client
                        await session.commit()
                        await message.answer("–í–∞—à–∞ —Ä–æ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞–∫ '–ø–æ–¥–æ–ø–µ—á–Ω—ã–π'. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /changerole –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
                    await session.delete(invite)
                    await session.commit()
                    return
            await message.answer(
                "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ OneFit!</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å:",
                reply_markup=get_role_keyboard(),
                parse_mode="HTML"
            )

# --- Callback –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ ---
from aiogram import F
@dp.callback_query(F.data.in_(["role_trainer", "role_client"]))
async def role_callback_handler(callback: types.CallbackQuery):
    async with SessionLocal() as session:
        result = await session.execute(select(User).where(User.telegram_id == str(callback.from_user.id)))
        user = result.scalar_one_or_none()
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
        if user.role:
            await callback.answer("–†–æ–ª—å —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /changerole –¥–ª—è —Å–º–µ–Ω—ã.", show_alert=True)
            return
        if callback.data == "role_trainer":
            user.role = UserRole.trainer
            await session.commit()
            await callback.message.edit_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å: <b>–¢—Ä–µ–Ω–µ—Ä üí™</b>", parse_mode="HTML")
        elif callback.data == "role_client":
            user.role = UserRole.client
            await session.commit()
            await callback.message.edit_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å: <b>–ü–æ–¥–æ–ø–µ—á–Ω—ã–π üèÉ</b>", parse_mode="HTML")
        await callback.answer()

# --- CHANGEROLE —Å –∫–Ω–æ–ø–∫–∞–º–∏ ---
@dp.message(Command("changerole"))
async def changerole_handler(message: Message):
    async with SessionLocal() as session:
        result = await session.execute(select(User).where(User.telegram_id == str(message.from_user.id)))
        user = result.scalar_one_or_none()
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        user.role = None
        await session.commit()
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å:",
            reply_markup=get_role_keyboard()
        )

# --- –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ ---
@dp.message(Command("deleteprofile"))
async def deleteprofile_start(message: Message, state: FSMContext):
    await message.answer(
        "<b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ?</b> –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.",
        reply_markup=get_delete_confirm_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(DeleteProfileStates.waiting_confirm)

@dp.callback_query(F.data.in_(["delete_yes", "delete_no"]))
async def deleteprofile_callback(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "delete_yes":
        async with SessionLocal() as session:
            result = await session.execute(select(User).where(User.telegram_id == str(callback.from_user.id)))
            user = result.scalar_one_or_none()
            if user:
                from db import TrainerClient, Workout, Reminder, PendingInvite
                await session.execute(TrainerClient.__table__.delete().where((TrainerClient.trainer_id == user.id) | (TrainerClient.client_id == user.id)))
                await session.execute(Workout.__table__.delete().where((Workout.trainer_id == user.id) | (Workout.client_id == user.id)))
                await session.execute(Reminder.__table__.delete().where(Reminder.user_id == user.id))
                await session.execute(PendingInvite.__table__.delete().where(PendingInvite.trainer_id == user.id))
                await session.delete(user)
                await session.commit()
                await callback.message.edit_text("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ <b>—É–¥–∞–ª–µ–Ω—ã</b>. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å OneFit!", parse_mode="HTML")
            else:
                await callback.message.edit_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
    else:
        await callback.message.edit_text("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await state.clear()
    await callback.answer()

# --- –£–ª—É—á—à–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π (–ø—Ä–∏–º–µ—Ä –¥–ª—è /about) ---
@dp.message(Command("about"))
async def about_handler(message: Message):
    about_text = (
        "<b>OneFit</b> ‚Äî —Ñ–∏—Ç–Ω–µ—Å-–±–æ—Ç –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤ –∏ –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö üèãÔ∏è‚Äç‚ôÇÔ∏è\n\n"
        "OneFit –ø–æ–º–æ–≥–∞–µ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞–º –≤–µ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤, –Ω–∞–∑–Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∞ –ø–æ–¥–æ–ø–µ—á–Ω—ã–º ‚Äî –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –ø–æ–ª—É—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è.\n"
        "–ë–æ—Ç –ø—Ä–æ—Å—Ç –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏, –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä—è–º–æ –≤ Telegram.\n\n"
        "<b>–ê–≤—Ç–æ—Ä:</b> <a href='https://t.me/ChursinVldmr'>@ChursinVldmr</a>\n"
        "–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º ‚Äî –ø–∏—à–∏—Ç–µ –∞–≤—Ç–æ—Ä—É!"
    )
    await message.answer(about_text, parse_mode="HTML")

# --- –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –¥—Ä—É–≥–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø—Ä–∏–º–µ—Ä –¥–ª—è /help, /privacy –∏ —Ç.–¥.) ---

@dp.message(Command("addclient"))
async def add_client_handler(message: Message):
    args = message.text.split()
    if len(args) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /addclient username_–∫–ª–∏–µ–Ω—Ç–∞")
        return
    username = args[1].lstrip("@").lower()
    async with SessionLocal() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å ‚Äî —Ç—Ä–µ–Ω–µ—Ä
        result = await session.execute(select(User).where(User.telegram_id == str(message.from_user.id)))
        trainer = result.scalar_one_or_none()
        if not trainer or trainer.role != UserRole.trainer:
            await message.answer("–¢–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–µ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤.")
            return
        # –ò—â–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ username (–±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
        result = await session.execute(select(User))
        users = result.scalars().all()
        client = next((u for u in users if u.username and u.username.lower() == username), None)
        if not client:
            # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
            invite = PendingInvite(username=username, trainer_id=trainer.id)
            session.add(invite)
            await session.commit()
            await message.answer("–ö–ª–∏–µ–Ω—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ! –ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω –Ω–∞–ø–∏—à–µ—Ç –±–æ—Ç—É, –æ–Ω –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.")
            return
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–≤—è–∑—å
        from db import TrainerClient
        result = await session.execute(
            select(TrainerClient).where(
                TrainerClient.trainer_id == trainer.id,
                TrainerClient.client_id == client.id
            )
        )
        link = result.scalar_one_or_none()
        if link:
            await message.answer("–≠—Ç–æ—Ç –∫–ª–∏–µ–Ω—Ç —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω.")
            return
        # –°–æ–∑–¥–∞—ë–º —Å–≤—è–∑—å
        new_link = TrainerClient(trainer_id=trainer.id, client_id=client.id)
        session.add(new_link)
        await session.commit()
        await message.answer(f"–ö–ª–∏–µ–Ω—Ç @{client.username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
        try:
            await bot.send_message(client.telegram_id, f"–í–∞—Å –¥–æ–±–∞–≤–∏–ª —Ç—Ä–µ–Ω–µ—Ä @{trainer.username or trainer.full_name} –≤ OneFit! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ –∏ –ø–æ–ª—É—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è.")
        except Exception:
            pass

@dp.message(Command("myclients"))
async def my_clients_handler(message: Message):
    async with SessionLocal() as session:
        result = await session.execute(select(User).where(User.telegram_id == str(message.from_user.id)))
        trainer = result.scalar_one_or_none()
        if not trainer or trainer.role != UserRole.trainer:
            await message.answer("–¢–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–µ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤.")
            return
        from db import TrainerClient, Workout
        result = await session.execute(
            select(TrainerClient, User)
            .join(User, TrainerClient.client_id == User.id)
            .where(TrainerClient.trainer_id == trainer.id)
        )
        clients = result.all()
        if not clients:
            await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤.")
            return
        for client_link, client in clients:
            # –°—á–∏—Ç–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –Ω–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é
            result = await session.execute(
                select(Workout).where(Workout.client_id == client.id, Workout.trainer_id == trainer.id).order_by(Workout.date.desc())
            )
            workouts = result.scalars().all()
            count = len(workouts)
            last_date = workouts[0].date.date() if workouts else None
            days_ago = (datetime.date.today() - last_date).days if last_date else None
            text = f"<b>–ö–ª–∏–µ–Ω—Ç:</b> {client.full_name or '-'} (@{client.username or '-'})\n"
            text += f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {count}\n"
            if last_date:
                text += f"–ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: {last_date} ({days_ago} –¥–Ω. –Ω–∞–∑–∞–¥)\n"
                if days_ago > 7:
                    text += "–°—Ç–∞—Ç—É—Å: –Ω–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞–ª—Å—è –±–æ–ª—å—à–µ –Ω–µ–¥–µ–ª–∏!\n"
                else:
                    text += "–°—Ç–∞—Ç—É—Å: –∞–∫—Ç–∏–≤–µ–Ω\n"
            else:
                text += "–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ –±—ã–ª–æ.\n"
            kb = InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞", callback_data=f"clientinfo_{client.username.lower()}")]]
            )
            await message.answer(text, parse_mode="HTML", reply_markup=kb)

def get_client_profile_text(client, trainer, workouts):
    count = len(workouts)
    last_date = workouts[0].date.date() if workouts else None
    days_ago = (datetime.date.today() - last_date).days if last_date else None
    msg = f"<b>–ü—Ä–æ—Ñ–∏–ª—å @{client.username or ''}</b>\n"
    msg += f"–§–ò–û: {client.full_name or '-'}\n"
    msg += f"–ü–æ–ª: {client.gender or '-'}\n"
    msg += f"–í–æ–∑—Ä–∞—Å—Ç: {client.age or '-'}\n"
    msg += f"–í–µ—Å: {client.weight or '-'} –∫–≥\n"
    msg += f"–†–æ—Å—Ç: {client.height or '-'} —Å–º\n"
    msg += f"–¶–µ–ª—å: {client.goal or '-'}\n"
    msg += f"–í—Å–µ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {count}\n"
    if last_date:
        msg += f"–ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: {last_date} ({days_ago} –¥–Ω. –Ω–∞–∑–∞–¥)\n"
        if days_ago > 7:
            msg += "–°—Ç–∞—Ç—É—Å: –Ω–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞–ª—Å—è –±–æ–ª—å—à–µ –Ω–µ–¥–µ–ª–∏!\n"
        else:
            msg += "–°—Ç–∞—Ç—É—Å: –∞–∫—Ç–∏–≤–µ–Ω\n"
    else:
        msg += "–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ –±—ã–ª–æ.\n"
    return msg

@dp.callback_query(F.data.startswith("clientinfo_"))
async def clientinfo_callback(callback: types.CallbackQuery, state: FSMContext):
    username = callback.data.replace("clientinfo_", "").lower()
    async with SessionLocal() as session:
        # trainer = —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        result = await session.execute(select(User).where(User.telegram_id == str(callback.from_user.id)))
        trainer = result.scalar_one_or_none()
        # client = –ø–æ username
        result = await session.execute(select(User))
        users = result.scalars().all()
        client = next((u for u in users if u.username and u.username.lower() == username), None)
        if not client:
            await callback.message.answer("–ö–ª–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º username –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await callback.answer()
            return
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑—å —Ç—Ä–µ–Ω–µ—Ä-–∫–ª–∏–µ–Ω—Ç
        from db import TrainerClient, Workout
        result = await session.execute(
            select(TrainerClient).where(
                TrainerClient.trainer_id == trainer.id,
                TrainerClient.client_id == client.id
            )
        )
        link = result.scalar_one_or_none()
        if not link:
            await callback.message.answer("–≠—Ç–æ—Ç –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ç–µ–±–µ.")
            await callback.answer()
            return
        # –°—á–∏—Ç–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        result = await session.execute(
            select(Workout).where(Workout.client_id == client.id, Workout.trainer_id == trainer.id).order_by(Workout.date.desc())
        )
        workouts = result.scalars().all()
        msg = get_client_profile_text(client, trainer, workouts)
        await callback.message.answer(msg, parse_mode="HTML")
    await callback.answer()

@dp.message(Command("mytrainers"))
async def my_trainers_handler(message: Message):
    async with SessionLocal() as session:
        result = await session.execute(select(User).where(User.telegram_id == str(message.from_user.id)))
        client = result.scalar_one_or_none()
        if not client or client.role != UserRole.client:
            await message.answer("–¢–æ–ª—å–∫–æ –ø–æ–¥–æ–ø–µ—á–Ω—ã–π –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–µ—Ä–æ–≤.")
            return
        from db import TrainerClient
        result = await session.execute(
            select(TrainerClient, User)
            .join(User, TrainerClient.trainer_id == User.id)
            .where(TrainerClient.client_id == client.id)
        )
        trainers = result.all()
        if not trainers:
            await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–µ–Ω–µ—Ä–æ–≤.")
            return
        msg = "–¢–≤–æ–∏ —Ç—Ä–µ–Ω–µ—Ä—ã:\n" + "\n".join([
            f"@{trainer.User.username or trainer.User.full_name}" for trainer in trainers
        ])
        await message.answer(msg)

@dp.message(Command("addworkout"))
async def add_workout_handler(message: Message):
    args = message.text.split(maxsplit=3)
    if len(args) < 4:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /addworkout username_–∫–ª–∏–µ–Ω—Ç–∞ –¥–∞—Ç–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è | –∑–∞–º–µ—Ç–∫–∏\n–ü—Ä–∏–º–µ—Ä: /addworkout ankalini 2024-04-29 –ü—Ä–∏—Å–µ–¥ 3x10, –ñ–∏–º 3x8 | –•–æ—Ä–æ—à–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞!")
        return
    username = args[1].lstrip("@")
    date_str = args[2]
    rest = args[3].split("|", 1)
    exercises = rest[0].strip()
    notes = rest[1].strip() if len(rest) > 1 else ""
    from db import Workout
    import datetime
    try:
        date = datetime.datetime.strptime(date_str, "%Y-%m-%d")
    except ValueError:
        await message.answer("–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2024-04-29)")
        return
    async with SessionLocal() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å ‚Äî —Ç—Ä–µ–Ω–µ—Ä
        result = await session.execute(select(User).where(User.telegram_id == str(message.from_user.id)))
        trainer = result.scalar_one_or_none()
        if not trainer or trainer.role != UserRole.trainer:
            await message.answer("–¢–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–µ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.")
            return
        # –ò—â–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ username
        result = await session.execute(select(User).where(User.username == username))
        client = result.scalar_one_or_none()
        if not client:
            await message.answer("–ö–ª–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º username –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞ —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É!")
            return
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤—è–∑—å —Ç—Ä–µ–Ω–µ—Ä-–∫–ª–∏–µ–Ω—Ç
        from db import TrainerClient
        result = await session.execute(
            select(TrainerClient).where(
                TrainerClient.trainer_id == trainer.id,
                TrainerClient.client_id == client.id
            )
        )
        link = result.scalar_one_or_none()
        if not link:
            await message.answer("–≠—Ç–æ—Ç –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ç–µ–±–µ. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å –µ–≥–æ —á–µ—Ä–µ–∑ /addclient.")
            return
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
        workout = Workout(
            client_id=client.id,
            trainer_id=trainer.id,
            date=date,
            exercises=exercises,
            notes=notes
        )
        session.add(workout)
        await session.commit()
        await message.answer(f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–ª—è @{username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

@dp.message(Command("workouts"))
async def workouts_handler(message: Message):
    from db import Workout
    args = message.text.split()
    async with SessionLocal() as session:
        result = await session.execute(select(User).where(User.telegram_id == str(message.from_user.id)))
        user = result.scalar_one_or_none()
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        # –î–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞: /workouts username_–∫–ª–∏–µ–Ω—Ç–∞
        if user.role == UserRole.trainer:
            if len(args) != 2:
                await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /workouts username_–∫–ª–∏–µ–Ω—Ç–∞")
                return
            username = args[1].lstrip("@").lower()
            result = await session.execute(select(User))
            users = result.scalars().all()
            client = next((u for u in users if u.username and u.username.lower() == username), None)
            if not client:
                await message.answer("–ö–ª–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º username –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            result = await session.execute(
                select(Workout).where(Workout.client_id == client.id, Workout.trainer_id == user.id).order_by(Workout.date.desc())
            )
            workouts = result.scalars().all()
            if not workouts:
                await message.answer("–£ —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.")
                return
            msg = f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ @{client.username}:\n"
            for w in workouts:
                msg += f"ID:{w.id} {w.date.date()} ‚Äî {w.exercises} | {w.notes}\n"
            await message.answer(msg)
        # –î–ª—è –∫–ª–∏–µ–Ω—Ç–∞: /workouts
        elif user.role == UserRole.client:
            result = await session.execute(
                select(Workout).where(Workout.client_id == user.id).order_by(Workout.date.desc())
            )
            workouts = result.scalars().all()
            if not workouts:
                await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.")
                return
            msg = "–¢–≤–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n"
            for w in workouts:
                msg += f"ID:{w.id} {w.date.date()} ‚Äî {w.exercises} | {w.notes}\n"
            await message.answer(msg)
        else:
            await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

@dp.message(Command("delworkout"))
async def del_workout_handler(message: Message):
    args = message.text.split()
    if len(args) != 2 or not args[1].isdigit():
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /delworkout id_—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
        return
    workout_id = int(args[1])
    from db import Workout
    async with SessionLocal() as session:
        result = await session.execute(select(User).where(User.telegram_id == str(message.from_user.id)))
        user = result.scalar_one_or_none()
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        result = await session.execute(select(Workout).where(Workout.id == workout_id))
        workout = result.scalar_one_or_none()
        if not workout:
            await message.answer("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        # –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
        if user.role == UserRole.trainer and workout.trainer_id != user.id:
            await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.")
            return
        if user.role == UserRole.client and workout.client_id != user.id:
            await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.")
            return
        await session.delete(workout)
        await session.commit()
        await message.answer("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞.")

@dp.message(Command("editworkout"))
async def edit_workout_handler(message: Message):
    args = message.text.split(maxsplit=2)
    if len(args) < 3 or not args[1].isdigit():
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /editworkout id_—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–∞—Ç–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è | –∑–∞–º–µ—Ç–∫–∏\n–ü—Ä–∏–º–µ—Ä: /editworkout 5 2024-05-01 –ü—Ä–∏—Å–µ–¥ 3x12, –ñ–∏–º 3x10 | –û—Ç–ª–∏—á–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞!")
        return
    workout_id = int(args[1])
    rest = args[2].split("|", 1)
    exercises_and_date = rest[0].strip().split(maxsplit=1)
    if len(exercises_and_date) < 2:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
        return
    date_str = exercises_and_date[0]
    exercises = exercises_and_date[1]
    notes = rest[1].strip() if len(rest) > 1 else ""
    from db import Workout
    import datetime
    try:
        date = datetime.datetime.strptime(date_str, "%Y-%m-%d")
    except ValueError:
        await message.answer("–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2024-05-01)")
        return
    async with SessionLocal() as session:
        result = await session.execute(select(User).where(User.telegram_id == str(message.from_user.id)))
        user = result.scalar_one_or_none()
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        result = await session.execute(select(Workout).where(Workout.id == workout_id))
        workout = result.scalar_one_or_none()
        if not workout:
            await message.answer("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        # –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
        if user.role == UserRole.trainer and workout.trainer_id != user.id:
            await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.")
            return
        if user.role == UserRole.client and workout.client_id != user.id:
            await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.")
            return
        workout.date = date
        workout.exercises = exercises
        workout.notes = notes
        await session.commit()
        await message.answer("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")

@dp.message(Command("remind"))
async def remind_handler(message: Message):
    args = message.text.split(maxsplit=4)
    async with SessionLocal() as session:
        result = await session.execute(select(User).where(User.telegram_id == str(message.from_user.id)))
        user = result.scalar_one_or_none()
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        # –ï—Å–ª–∏ —Ç—Ä–µ–Ω–µ—Ä –∏ —É–∫–∞–∑–∞–ª username –∫–ª–∏–µ–Ω—Ç–∞
        if user.role == UserRole.trainer and len(args) >= 4:
            username = args[1].lstrip("@").lower()
            date_str = args[2]
            time_str = args[3]
            text = args[4] if len(args) >= 5 else "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ!"
            result = await session.execute(select(User))
            users = result.scalars().all()
            client = next((u for u in users if u.username and u.username.lower() == username), None)
            if not client:
                await message.answer("–ö–ª–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º username –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            remind_at = None
            try:
                remind_at = datetime.datetime.strptime(f"{date_str} {time_str}", "%Y-%m-%d %H:%M")
            except ValueError:
                await message.answer("–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM")
                return
            reminder = Reminder(user_id=client.id, remind_at=remind_at, text=text)
            session.add(reminder)
            await session.commit()
            await message.answer(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è @{client.username} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {remind_at.strftime('%Y-%m-%d %H:%M')}")
        # –î–ª—è —Å–µ–±—è (–∫–ª–∏–µ–Ω—Ç –∏–ª–∏ —Ç—Ä–µ–Ω–µ—Ä –±–µ–∑ username)
        elif len(args) >= 3:
            date_str = args[1]
            time_str = args[2]
            text = args[3] if len(args) >= 4 else "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ!"
            remind_at = None
            try:
                remind_at = datetime.datetime.strptime(f"{date_str} {time_str}", "%Y-%m-%d %H:%M")
            except ValueError:
                await message.answer("–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM")
                return
            reminder = Reminder(user_id=user.id, remind_at=remind_at, text=text)
            session.add(reminder)
            await session.commit()
            await message.answer(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {remind_at.strftime('%Y-%m-%d %H:%M')}")
        else:
            await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /remind [username_] YYYY-MM-DD HH:MM [—Ç–µ–∫—Å—Ç_–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è]\n–ü—Ä–∏–º–µ—Ä—ã:\n/remind 2024-05-01 09:00\n/remind passway_pro 2024-05-02 10:00 –ù–µ –∑–∞–±—É–¥—å –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ!")

@dp.message(Command("clientinfo"))
async def client_info_handler(message: Message):
    args = message.text.split()
    if len(args) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /clientinfo username_–∫–ª–∏–µ–Ω—Ç–∞")
        return
    username = args[1].lstrip("@").lower()
    async with SessionLocal() as session:
        result = await session.execute(select(User).where(User.telegram_id == str(message.from_user.id)))
        trainer = result.scalar_one_or_none()
        if not trainer or trainer.role != UserRole.trainer:
            await message.answer("–¢–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–µ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤.")
            return
        result = await session.execute(select(User))
        users = result.scalars().all()
        client = next((u for u in users if u.username and u.username.lower() == username), None)
        if not client:
            await message.answer("–ö–ª–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º username –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤—è–∑—å —Ç—Ä–µ–Ω–µ—Ä-–∫–ª–∏–µ–Ω—Ç
        from db import TrainerClient, Workout
        result = await session.execute(
            select(TrainerClient).where(
                TrainerClient.trainer_id == trainer.id,
                TrainerClient.client_id == client.id
            )
        )
        link = result.scalar_one_or_none()
        if not link:
            await message.answer("–≠—Ç–æ—Ç –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ç–µ–±–µ.")
            return
        # –°—á–∏—Ç–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –Ω–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é
        result = await session.execute(
            select(Workout).where(Workout.client_id == client.id, Workout.trainer_id == trainer.id).order_by(Workout.date.desc())
        )
        workouts = result.scalars().all()
        count = len(workouts)
        last_date = workouts[0].date.date() if workouts else None
        days_ago = (datetime.date.today() - last_date).days if last_date else None
        msg = f"–ü—Ä–æ—Ñ–∏–ª—å @{client.username or ''}\n"
        msg += f"–§–ò–û: {client.full_name or '-'}\n"
        msg += f"–í–æ–∑—Ä–∞—Å—Ç: {client.age or '-'}\n"
        msg += f"–í–µ—Å: {client.weight or '-'} –∫–≥\n"
        msg += f"–†–æ—Å—Ç: {client.height or '-'} —Å–º\n"
        msg += f"–¶–µ–ª—å: {client.goal or '-'}\n"
        msg += f"–í—Å–µ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {count}\n"
        if last_date:
            msg += f"–ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: {last_date} ({days_ago} –¥–Ω. –Ω–∞–∑–∞–¥)\n"
            if days_ago > 7:
                msg += "–°—Ç–∞—Ç—É—Å: –Ω–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞–ª—Å—è –±–æ–ª—å—à–µ –Ω–µ–¥–µ–ª–∏!\n"
            else:
                msg += "–°—Ç–∞—Ç—É—Å: –∞–∫—Ç–∏–≤–µ–Ω\n"
        else:
            msg += "–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ –±—ã–ª–æ.\n"
        await message.answer(msg)

async def reminder_worker():
    while True:
        now = datetime.datetime.now()
        async with SessionLocal() as session:
            result = await session.execute(
                select(Reminder, User)
                .join(User, Reminder.user_id == User.id)
                .where(Reminder.sent == 0)
                .where(Reminder.remind_at <= now)
            )
            reminders = result.all()
            for reminder, user in reminders:
                try:
                    await bot.send_message(user.telegram_id, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {reminder.text}")
                except Exception:
                    pass
                reminder.sent = 1
            await session.commit()
        await asyncio.sleep(60)

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
@app.on_event("startup")
async def on_startup():
    await init_db()
    asyncio.create_task(dp.start_polling(bot))
    asyncio.create_task(reminder_worker())

class ProfileStates(StatesGroup):
    waiting_full_name = State()
    waiting_gender = State()
    waiting_age = State()
    waiting_weight = State()  # —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
    waiting_height = State()  # —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
    waiting_goal = State()    # —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
    waiting_experience = State()  # —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞
    waiting_specialization = State()  # —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞
    waiting_contacts = State()  # —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞
    waiting_about = State()  # —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞
    waiting_photo = State()  # —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞

# --- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π /profile ---
async def profile_start_from_id(user_id, message, state: FSMContext):
    async with SessionLocal() as session:
        result = await session.execute(select(User).where(User.telegram_id == str(user_id)))
        user = result.scalar_one_or_none()
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        await state.update_data(role=user.role.value)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(ProfileStates.waiting_full_name)

@dp.message(Command("profile"))
async def profile_start(message: Message, state: FSMContext):
    await profile_start_from_id(message.from_user.id, message, state)

@dp.message(ProfileStates.waiting_full_name)
async def profile_full_name(message: Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
    gender_kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ú—É–∂—Å–∫–æ–π")],[KeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π")]],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=gender_kb)
    await state.set_state(ProfileStates.waiting_gender)

@dp.message(ProfileStates.waiting_gender)
async def profile_gender(message: Message, state: FSMContext):
    gender = message.text.strip().lower()
    if gender not in ["–º—É–∂—Å–∫–æ–π", "–∂–µ–Ω—Å–∫–∏–π"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∫–Ω–æ–ø–∫–æ–π.")
        return
    await state.update_data(gender="–ú" if gender == "–º—É–∂—Å–∫–æ–π" else "–ñ")
    data = await state.get_data()
    if data.get("role") == "trainer":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (–ª–µ—Ç):", reply_markup=ReplyKeyboardRemove())
        await state.set_state(ProfileStates.waiting_age)
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (–ª–µ—Ç):", reply_markup=ReplyKeyboardRemove())
        await state.set_state(ProfileStates.waiting_age)

@dp.message(ProfileStates.waiting_age)
async def profile_age(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º.")
        return
    await state.update_data(age=int(message.text))
    data = await state.get_data()
    if data.get("role") == "trainer":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã (–ª–µ—Ç):")
        await state.set_state(ProfileStates.waiting_experience)
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–∫–≥):")
        await state.set_state(ProfileStates.waiting_weight)

@dp.message(ProfileStates.waiting_weight)
async def profile_weight(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–µ—Å —á–∏—Å–ª–æ–º.")
        return
    await state.update_data(weight=int(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (—Å–º):")
    await state.set_state(ProfileStates.waiting_height)

@dp.message(ProfileStates.waiting_height)
async def profile_height(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–æ—Å—Ç —á–∏—Å–ª–æ–º.")
        return
    await state.update_data(height=int(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Ö—É–¥–µ—Ç—å, –Ω–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É –∏ —Ç.–¥.):")
    await state.set_state(ProfileStates.waiting_goal)

@dp.message(ProfileStates.waiting_goal)
async def profile_goal(message: Message, state: FSMContext):
    await state.update_data(goal=message.text)
    data = await state.get_data()
    async with SessionLocal() as session:
        result = await session.execute(select(User).where(User.telegram_id == str(message.from_user.id)))
        user = result.scalar_one_or_none()
        if user:
            user.full_name = data["full_name"]
            user.gender = data["gender"]
            user.age = data["age"]
            user.weight = data["weight"]
            user.height = data["height"]
            user.goal = data["goal"]
            await session.commit()
    await message.answer("–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!", reply_markup=get_main_keyboard("client"))
    await state.clear()

# --- –î–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞ ---
@dp.message(ProfileStates.waiting_experience)
async def profile_experience(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —á–∏—Å–ª–æ–º (–ª–µ—Ç).")
        return
    await state.update_data(experience=int(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∂–∏—Ä–æ—Å–∂–∏–≥–∞–Ω–∏–µ, –Ω–∞–±–æ—Ä –º–∞—Å—Å—ã, —Ä–∞—Å—Ç—è–∂–∫–∞ –∏ —Ç.–¥.):")
    await state.set_state(ProfileStates.waiting_specialization)

@dp.message(ProfileStates.waiting_specialization)
async def profile_specialization(message: Message, state: FSMContext):
    await state.update_data(specialization=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã (–ø–æ –∂–µ–ª–∞–Ω–∏—é, –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
    await state.set_state(ProfileStates.waiting_contacts)

@dp.message(ProfileStates.waiting_contacts)
async def profile_contacts(message: Message, state: FSMContext):
    await state.update_data(contacts=message.text)
    await message.answer("–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ (–∫–æ—Ä–æ—Ç–∫–æ):")
    await state.set_state(ProfileStates.waiting_about)

@dp.message(ProfileStates.waiting_about)
async def profile_about(message: Message, state: FSMContext):
    await state.update_data(about=message.text)
    await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
    await state.set_state(ProfileStates.waiting_photo)

@dp.message(ProfileStates.waiting_photo)
async def profile_photo(message: Message, state: FSMContext):
    file_id = None
    if message.photo:
        file_id = message.photo[-1].file_id
        await state.update_data(photo_file_id=file_id)
    elif message.text and message.text.lower().startswith("–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"):
        await state.update_data(photo_file_id=None)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
        return
    data = await state.get_data()
    async with SessionLocal() as session:
        result = await session.execute(select(User).where(User.telegram_id == str(message.from_user.id)))
        user = result.scalar_one_or_none()
        if user:
            user.full_name = data["full_name"]
            user.gender = data["gender"]
            user.age = data["age"]
            user.experience = data["experience"]
            user.specialization = data["specialization"]
            user.contacts = data["contacts"]
            user.about = data["about"]
            user.photo_file_id = data.get("photo_file_id")
            await session.commit()
    await message.answer("–ü—Ä–æ—Ñ–∏–ª—å —Ç—Ä–µ–Ω–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!", reply_markup=get_main_keyboard("trainer"))
    await state.clear()

@dp.message(Command("editclient"))
async def edit_client_handler(message: Message):
    args = message.text.split(maxsplit=3)
    if len(args) != 4:
        await message.answer(
            "‚ùóÔ∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π: /editclient username –ø–æ–ª–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n"
            "–ü–æ–ª—è: full_name, age, weight, height, goal\n"
            "–ü—Ä–∏–º–µ—Ä: /editclient passway_pro weight 80"
        )
        return
    username = args[1].lstrip("@").lower()
    field = args[2]
    value = args[3]
    allowed_fields = ["full_name", "age", "weight", "height", "goal"]
    if field not in allowed_fields:
        await message.answer(f"–ú–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–ª—è: {', '.join(allowed_fields)}")
        return
    async with SessionLocal() as session:
        result = await session.execute(select(User).where(User.telegram_id == str(message.from_user.id)))
        trainer = result.scalar_one_or_none()
        if not trainer or trainer.role != UserRole.trainer:
            await message.answer("–¢–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–µ—Ä –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π.")
            return
        result = await session.execute(select(User))
        users = result.scalars().all()
        client = next((u for u in users if u.username and u.username.lower() == username), None)
        if not client:
            await message.answer("–ö–ª–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º username –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤—è–∑—å —Ç—Ä–µ–Ω–µ—Ä-–∫–ª–∏–µ–Ω—Ç
        from db import TrainerClient
        result = await session.execute(
            select(TrainerClient).where(
                TrainerClient.trainer_id == trainer.id,
                TrainerClient.client_id == client.id
            )
        )
        link = result.scalar_one_or_none()
        if not link:
            await message.answer("–≠—Ç–æ—Ç –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ç–µ–±–µ.")
            return
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ
        if field in ["age", "weight", "height"]:
            if not value.isdigit():
                await message.answer(f"–ü–æ–ª–µ {field} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
                return
            setattr(client, field, int(value))
        else:
            setattr(client, field, value)
        await session.commit()
        await message.answer(f"–ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ @{client.username} –æ–±–Ω–æ–≤–ª—ë–Ω: {field} = {value}")

@dp.message(Command("privacy"))
async def privacy_handler(message: Message):
    privacy_text = (
        "–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ OneFit\n\n"
        "–í–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–∏–º—è, username, Telegram ID, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö –∏ –ø—Ä–æ—Ñ–∏–ª–µ) –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è OneFit –∏ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.\n"
        "–î–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –Ω–∞ –∑–∞—â–∏—â—ë–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ –∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ –≤–Ω—É—Ç—Ä–∏ –±–æ—Ç–∞ (–≤–µ–¥–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–∏–∫–∞, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, —Å–≤—è–∑—å —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º –∏ —Ç.–¥.).\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ –∑–∞–ø—Ä–æ—Å—É, –Ω–∞–ø–∏—Å–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Å—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–µ–π (–µ—Å–ª–∏ –æ–Ω–∞ –ø–æ—è–≤–∏—Ç—Å—è –≤ –±—É–¥—É—â–µ–º).\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É—è –±–æ—Ç–∞, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –¥–∞–Ω–Ω–æ–π –ø–æ–ª–∏—Ç–∏–∫–æ–π."
    )
    await message.answer(privacy_text)

@dp.message(Command("help"))
async def help_handler(message: Message):
    async with SessionLocal() as session:
        result = await session.execute(select(User).where(User.telegram_id == str(message.from_user.id)))
        user = result.scalar_one_or_none()
        role = user.role.value if user and user.role else None
    help_text = (
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/about ‚Äî –æ –±–æ—Ç–µ –∏ –∞–≤—Ç–æ—Ä–µ\n"
        "/addclient username ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ (—Ç—Ä–µ–Ω–µ—Ä)\n"
        "/myclients ‚Äî —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ (—Ç—Ä–µ–Ω–µ—Ä)\n"
        "/mytrainers ‚Äî —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ç—Ä–µ–Ω–µ—Ä–æ–≤ (–∫–ª–∏–µ–Ω—Ç)\n"
        "/addworkout username –¥–∞—Ç–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è | –∑–∞–º–µ—Ç–∫–∏ ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∫–ª–∏–µ–Ω—Ç—É (—Ç—Ä–µ–Ω–µ—Ä)\n"
        "/workouts username ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ (—Ç—Ä–µ–Ω–µ—Ä)\n"
        "/workouts ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–∫–ª–∏–µ–Ω—Ç)\n"
        "/delworkout id ‚Äî —É–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É\n"
        "/editworkout id –¥–∞—Ç–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è | –∑–∞–º–µ—Ç–∫–∏ ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É\n"
        "/remind [username] –¥–∞—Ç–∞ –≤—Ä–µ–º—è [—Ç–µ–∫—Å—Ç] ‚Äî —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–µ–±–µ –∏–ª–∏ –∫–ª–∏–µ–Ω—Ç—É\n"
        "/clientinfo username ‚Äî –º–∏–Ω–∏-CRM: –ø—Ä–æ—Ñ–∏–ª—å –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ (—Ç—Ä–µ–Ω–µ—Ä)\n"
        "/profile ‚Äî –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å (–∫–ª–∏–µ–Ω—Ç)\n"
        "/editclient username –ø–æ–ª–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ (—Ç—Ä–µ–Ω–µ—Ä)\n"
        "/changerole ‚Äî —Å–º–µ–Ω–∏—Ç—å —Å–≤–æ—é —Ä–æ–ª—å (—Ç—Ä–µ–Ω–µ—Ä/–ø–æ–¥–æ–ø–µ—á–Ω—ã–π)\n"
        "/privacy ‚Äî –ø–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏\n"
        "/deleteprofile ‚Äî —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ\n"
        "/help ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏\n"
        "\n–ü—Ä–∏–º–µ—Ä—ã:\n"
        "/addclient passway_pro\n"
        "/addworkout passway_pro 2024-05-01 –ü—Ä–∏—Å–µ–¥ 3x10 | –û—Ç–ª–∏—á–Ω–æ!\n"
        "/remind 2024-05-02 10:00 –ù–µ –∑–∞–±—É–¥—å –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ!\n"
        "/remind passway_pro 2024-05-02 10:00 –ù–µ –∑–∞–±—É–¥—å –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ!\n"
        "/editclient passway_pro weight 80\n"
    )
    await message.answer(help_text, parse_mode="HTML", reply_markup=get_main_keyboard(role))

# --- –ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è ---
def get_profile_text(user):
    if user.role == UserRole.trainer:
        text = f"<b>–ü—Ä–æ—Ñ–∏–ª—å —Ç—Ä–µ–Ω–µ—Ä–∞</b>\n"
        text += f"–§–ò–û: {user.full_name or '-'}\n"
        text += f"–ü–æ–ª: {user.gender or '-'}\n"
        text += f"–í–æ–∑—Ä–∞—Å—Ç: {user.age or '-'}\n"
        text += f"–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {user.experience or '-'} –ª–µ—Ç\n"
        text += f"–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {user.specialization or '-'}\n"
        text += f"–ö–æ–Ω—Ç–∞–∫—Ç—ã: {user.contacts or '-'}\n"
        text += f"–û —Å–µ–±–µ: {user.about or '-'}\n"
    else:
        text = f"<b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ</b>\n"
        text += f"–§–ò–û: {user.full_name or '-'}\n"
        text += f"–ü–æ–ª: {user.gender or '-'}\n"
        text += f"–í–æ–∑—Ä–∞—Å—Ç: {user.age or '-'}\n"
        text += f"–í–µ—Å: {user.weight or '-'} –∫–≥\n"
        text += f"–†–æ—Å—Ç: {user.height or '-'} —Å–º\n"
        text += f"–¶–µ–ª—å: {user.goal or '-'}\n"
    return text

profile_edit_kb = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="edit_profile")]]
)

@dp.message(lambda m: m.text == "üè† –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def quick_profile(message: Message, state: FSMContext):
    async with SessionLocal() as session:
        result = await session.execute(select(User).where(User.telegram_id == str(message.from_user.id)))
        user = result.scalar_one_or_none()
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
        if user.photo_file_id:
            await message.answer_photo(user.photo_file_id, caption=get_profile_text(user), parse_mode="HTML", reply_markup=profile_edit_kb)
        else:
            await message.answer(get_profile_text(user), parse_mode="HTML", reply_markup=profile_edit_kb)

# --- Callback –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è ---
from aiogram import F
@dp.callback_query(F.data == "edit_profile")
async def edit_profile_callback(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await profile_start_from_id(callback.from_user.id, callback.message, state)

@dp.message(lambda m: m.text == "üë• –ú–æ–∏ –∫–ª–∏–µ–Ω—Ç—ã")
async def quick_myclients(message: Message, state: FSMContext):
    await my_clients_handler(message)

@dp.message(lambda m: m.text == "üë®‚Äçüè´ –ú–æ–∏ —Ç—Ä–µ–Ω–µ—Ä—ã")
async def quick_mytrainers(message: Message, state: FSMContext):
    await my_trainers_handler(message)

@dp.message(lambda m: m.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def quick_help(message: Message, state: FSMContext):
    await help_handler(message)

@dp.message(lambda m: m.text == "üèãÔ∏è‚Äç‚ôÇÔ∏è –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
async def quick_workouts(message: Message, state: FSMContext):
    await workouts_handler(message)

@dp.message(lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞")
async def quick_addclient(message: Message, state: FSMContext):
    await message.answer(
        "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ username (–Ω–∞–ø—Ä–∏–º–µ—Ä: passway_pro) –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /addclient username"
    )
    await state.set_state(AddClientStates.waiting_username)

class AddClientStates(StatesGroup):
    waiting_username = State()

@dp.message(AddClientStates.waiting_username)
async def addclient_username_handler(message: Message, state: FSMContext):
    username = message.text.strip().lstrip("@").lower()
    if not username.isalnum() and "_" not in username:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü–∞, —Ü–∏—Ñ—Ä—ã –∏ _)")
        return
    async with SessionLocal() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å ‚Äî —Ç—Ä–µ–Ω–µ—Ä
        result = await session.execute(select(User).where(User.telegram_id == str(message.from_user.id)))
        trainer = result.scalar_one_or_none()
        if not trainer or trainer.role != UserRole.trainer:
            await message.answer("–¢–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–µ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤.")
            await state.clear()
            return
        # –ò—â–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ username (–±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
        result = await session.execute(select(User))
        users = result.scalars().all()
        client = next((u for u in users if u.username and u.username.lower() == username), None)
        if not client:
            # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
            invite = PendingInvite(username=username, trainer_id=trainer.id)
            session.add(invite)
            await session.commit()
            await message.answer("–ö–ª–∏–µ–Ω—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ! –ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω –Ω–∞–ø–∏—à–µ—Ç –±–æ—Ç—É, –æ–Ω –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.")
            await state.clear()
            return
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–≤—è–∑—å
        from db import TrainerClient
        result = await session.execute(
            select(TrainerClient).where(
                TrainerClient.trainer_id == trainer.id,
                TrainerClient.client_id == client.id
            )
        )
        link = result.scalar_one_or_none()
        if link:
            await message.answer("–≠—Ç–æ—Ç –∫–ª–∏–µ–Ω—Ç —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω.")
            await state.clear()
            return
        # –°–æ–∑–¥–∞—ë–º —Å–≤—è–∑—å
        new_link = TrainerClient(trainer_id=trainer.id, client_id=client.id)
        session.add(new_link)
        await session.commit()
        await message.answer(f"–ö–ª–∏–µ–Ω—Ç @{client.username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
        try:
            await bot.send_message(client.telegram_id, f"–í–∞—Å –¥–æ–±–∞–≤–∏–ª —Ç—Ä–µ–Ω–µ—Ä @{trainer.username or trainer.full_name} –≤ OneFit! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ –∏ –ø–æ–ª—É—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è.")
        except Exception:
            pass
    await state.clear()

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π fallback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Å–∞–º–æ–º –Ω–∏–∑—É —Ñ–∞–π–ª–∞!
@dp.message()
async def fallback_handler(message: Message):
    known_commands = [
        "/start", "/addclient", "/myclients", "/mytrainers", "/addworkout", "/workouts", "/delworkout", "/editworkout", "/remind", "/clientinfo", "/profile", "/editclient", "/changerole", "/help"
    ]
    if any(message.text.startswith(cmd) for cmd in known_commands):
        await message.answer("–ü–æ—Ö–æ–∂–µ, –∫–æ–º–∞–Ω–¥–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–ª–∏ —Å –æ—à–∏–±–∫–æ–π.\n–ü–æ–ø—Ä–æ–±—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –∏ –ø—Ä–∏–º–µ—Ä–æ–≤.")
    # –∏–Ω–∞—á–µ –Ω–µ –º–µ—à–∞–µ–º –¥—Ä—É–≥–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º
